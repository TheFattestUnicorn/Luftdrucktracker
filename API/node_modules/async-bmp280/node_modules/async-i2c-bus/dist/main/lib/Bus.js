"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("bluebird");
const i2c_bus_1 = require("i2c-bus");
const BusError_1 = __importDefault(require("./BusError"));
const Bus = ({ busNumber = 1, openBus = i2c_bus_1.open } = {}) => {
    let i2cBus = null;
    let isOpen = false;
    return {
        get busNumber() {
            return busNumber;
        },
        get i2cBus() {
            return i2cBus;
        },
        get isOpen() {
            return isOpen;
        },
        open() {
            return new Promise((resolve, reject) => {
                i2cBus = bluebird_1.promisifyAll(openBus(this.busNumber, (error) => {
                    if (error) {
                        reject(`Error opening i2c bus: ${error.message}`);
                    }
                    isOpen = true;
                    resolve(this);
                }));
            });
        },
        async close() {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            await i2cBus.closeAsync();
            isOpen = false;
            i2cBus = null;
            return this;
        },
        async i2cFuncs() {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.i2cFuncsAsync();
        },
        async scan() {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.scanAsync();
        },
        async i2cRead(address, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.i2cReadAsync(address, length, buffer);
        },
        async i2cWrite(address, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.i2cWriteAsync(address, length, buffer);
        },
        async receiveByte(address) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.receiveByteAsync(address);
        },
        async sendByte(address, byte) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.sendByteAsync(address, byte);
        },
        async readByte(address, command) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.readByteAsync(address, command);
        },
        async readWord(address, command) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.readWordAsync(address, command);
        },
        async readI2cBlock(address, command, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.readI2cBlockAsync(address, command, length, buffer);
        },
        async writeByte(address, command, byte) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.writeByteAsync(address, command, byte);
        },
        async writeWord(address, command, word) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.writeWordAsync(address, command, word);
        },
        async writeI2cBlock(address, command, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError_1.default('Bus is not open', busNumber);
            }
            return i2cBus.writeI2cBlockAsync(address, command, length, buffer);
        },
    };
};
exports.default = Bus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9CdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBd0M7QUFDeEMscUNBQTZDO0FBRTdDLDBEQUFrQztBQUlsQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsY0FBVSxFQUFFLEdBQUcsRUFBRSxFQUFnQixFQUFFO0lBQ3pFLElBQUksTUFBTSxHQUEwQixJQUFJLENBQUM7SUFDekMsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO0lBRTVCLE9BQU87UUFDTCxJQUFJLFNBQVM7WUFDWCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO1FBQ0QsSUFBSSxNQUFNO1lBQ1IsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUNELElBQUksTUFBTTtZQUNSLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxJQUFJO1lBQ0YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxHQUFHLHVCQUFZLENBQWlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7b0JBQzdFLElBQUksS0FBSyxFQUFFO3dCQUNULE1BQU0sQ0FBQywwQkFBMEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7cUJBQ25EO29CQUVELE1BQU0sR0FBRyxJQUFJLENBQUM7b0JBRWQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQW1CLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxLQUFLLENBQUMsS0FBSztZQUNULElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3RCLE1BQU0sSUFBSSxrQkFBUSxDQUFDLGlCQUFpQixFQUFFLFNBQVMs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