"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultI2cBusFuncs = {
    i2c: false,
    tenBitAddr: false,
    protocolMangling: false,
    smbusPec: false,
    smbusBlockProcCall: false,
    smbusQuick: false,
    smbusReceiveByte: false,
    smbusSendByte: false,
    smbusReadByte: false,
    smbusWriteByte: false,
    smbusReadWord: false,
    smbusWriteWord: false,
    smbusProcCall: false,
    smbusReadBlock: false,
    smbusWriteBlock: false,
    smbusReadI2cBlock: false,
    smbusWriteI2cBlock: false,
};
// @TODO Add full features
const createI2cBusMock = ({ devices = {}, i2cBusFuncs = defaultI2cBusFuncs, } = {}) => (_, openCallback) => {
    openCallback(null);
    return {
        close(callback) {
            callback(null);
        },
        closeSync() {
            return;
        },
        i2cFuncsSync() {
            return i2cBusFuncs;
        },
        i2cFuncs(callback) {
            callback(null, this.i2cFuncsSync());
        },
        scanSync() {
            return Object.keys(devices).map(address => parseInt(address, 10));
        },
        scan(callback) {
            callback(null, this.scanSync());
        },
        i2cReadSync(address, length, buffer) {
            return devices[address].copy(buffer, 0, 0, length);
        },
        i2cRead(address, length, buffer, callback) {
            callback(null, this.i2cReadSync(address, length, buffer), buffer);
        },
        i2cWriteSync(address, length, buffer) {
            return buffer.copy(devices[address], 0, 0, length);
        },
        i2cWrite(address, length, buffer, callback) {
            callback(null, this.i2cWriteSync(address, length, buffer), buffer);
        },
        readByteSync(address, command) {
            return devices[address][command];
        },
        readByte(address, command, callback) {
            callback(null, this.readByteSync(address, command));
        },
        readWordSync(address, command) {
            return devices[address].readUInt16BE(command);
        },
        readWord(address, command, callback) {
            return callback(null, this.readWordSync(address, command));
        },
        readI2cBlockSync(address, command, length, buffer) {
            return devices[address].copy(buffer, 0, command, command + length);
        },
        readI2cBlock(address, command, length, buffer, callback) {
            callback(null, this.readI2cBlockSync(address, command, length, buffer), buffer);
        },
        receiveByteSync(address) {
            return this.readByteSync(address, 0);
        },
        receiveByte(address, callback) {
            callback(null, this.receiveByteSync(address));
        },
        writeByteSync(address, command, byte) {
            devices[address][command] = byte;
        },
        writeByte(address, command, byte, callback) {
            this.writeByteSync(address, command, byte);
            callback(null);
        },
        sendByteSync(address, byte) {
            this.writeByteSync(address, 0, byte);
        },
        sendByte(address, byte, callback) {
            this.sendByteSync(address, byte);
            callback(null);
        },
        writeWordSync(address, command, word) {
            devices[address].writeUInt16BE(word, command);
        },
        writeWord(address, command, word, callback) {
            this.writeByteSync(address, command, word);
            callback(null);
        },
        writeQuickSync() {
            return null;
        },
        writeQuick(__, ___, ____, callback) {
            callback(null);
        },
        writeI2cBlockSync(address, command, length, buffer) {
            return buffer.copy(devices[address], command, 0, length);
        },
        writeI2cBlock(address, command, length, buffer, callback) {
            callback(null, this.writeI2cBlockSync(address, command, length, buffer), buffer);
        },
    };
};
exports.default = createI2cBusMock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlSTJjQnVzTW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY3JlYXRlSTJjQnVzTW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsR0FBRyxFQUFFLEtBQUs7SUFDVixVQUFVLEVBQUUsS0FBSztJQUNqQixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLFFBQVEsRUFBRSxLQUFLO0lBQ2Ysa0JBQWtCLEVBQUUsS0FBSztJQUN6QixVQUFVLEVBQUUsS0FBSztJQUNqQixnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLGVBQWUsRUFBRSxLQUFLO0lBQ3RCLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIsa0JBQWtCLEVBQUUsS0FBSztDQUMxQixDQUFDO0FBRUYsMEJBQTBCO0FBQzFCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUN4QixPQUFPLEdBQUcsRUFBRSxFQUNaLFdBQVcsR0FBRyxrQkFBa0IsTUFJOUIsRUFBRSxFQUFlLEVBQUUsQ0FBQyxDQUFDLENBQVMsRUFBRSxZQUFnQyxFQUFVLEVBQUU7SUFDOUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5CLE9BQU87UUFDTCxLQUFLLENBQUMsUUFBNEI7WUFDaEMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUM7UUFDRCxTQUFTO1lBQ1AsT0FBTztRQUNULENBQUM7UUFDRCxZQUFZO1lBQ1YsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQztRQUNELFFBQVEsQ0FBQyxRQUFxQztZQUM1QyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUks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