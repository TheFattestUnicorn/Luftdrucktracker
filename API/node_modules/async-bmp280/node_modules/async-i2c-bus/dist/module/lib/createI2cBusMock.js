const defaultI2cBusFuncs = {
    i2c: false,
    tenBitAddr: false,
    protocolMangling: false,
    smbusPec: false,
    smbusBlockProcCall: false,
    smbusQuick: false,
    smbusReceiveByte: false,
    smbusSendByte: false,
    smbusReadByte: false,
    smbusWriteByte: false,
    smbusReadWord: false,
    smbusWriteWord: false,
    smbusProcCall: false,
    smbusReadBlock: false,
    smbusWriteBlock: false,
    smbusReadI2cBlock: false,
    smbusWriteI2cBlock: false,
};
// @TODO Add full features
const createI2cBusMock = ({ devices = {}, i2cBusFuncs = defaultI2cBusFuncs, } = {}) => (_, openCallback) => {
    openCallback(null);
    return {
        close(callback) {
            callback(null);
        },
        closeSync() {
            return;
        },
        i2cFuncsSync() {
            return i2cBusFuncs;
        },
        i2cFuncs(callback) {
            callback(null, this.i2cFuncsSync());
        },
        scanSync() {
            return Object.keys(devices).map(address => parseInt(address, 10));
        },
        scan(callback) {
            callback(null, this.scanSync());
        },
        i2cReadSync(address, length, buffer) {
            return devices[address].copy(buffer, 0, 0, length);
        },
        i2cRead(address, length, buffer, callback) {
            callback(null, this.i2cReadSync(address, length, buffer), buffer);
        },
        i2cWriteSync(address, length, buffer) {
            return buffer.copy(devices[address], 0, 0, length);
        },
        i2cWrite(address, length, buffer, callback) {
            callback(null, this.i2cWriteSync(address, length, buffer), buffer);
        },
        readByteSync(address, command) {
            return devices[address][command];
        },
        readByte(address, command, callback) {
            callback(null, this.readByteSync(address, command));
        },
        readWordSync(address, command) {
            return devices[address].readUInt16BE(command);
        },
        readWord(address, command, callback) {
            return callback(null, this.readWordSync(address, command));
        },
        readI2cBlockSync(address, command, length, buffer) {
            return devices[address].copy(buffer, 0, command, command + length);
        },
        readI2cBlock(address, command, length, buffer, callback) {
            callback(null, this.readI2cBlockSync(address, command, length, buffer), buffer);
        },
        receiveByteSync(address) {
            return this.readByteSync(address, 0);
        },
        receiveByte(address, callback) {
            callback(null, this.receiveByteSync(address));
        },
        writeByteSync(address, command, byte) {
            devices[address][command] = byte;
        },
        writeByte(address, command, byte, callback) {
            this.writeByteSync(address, command, byte);
            callback(null);
        },
        sendByteSync(address, byte) {
            this.writeByteSync(address, 0, byte);
        },
        sendByte(address, byte, callback) {
            this.sendByteSync(address, byte);
            callback(null);
        },
        writeWordSync(address, command, word) {
            devices[address].writeUInt16BE(word, command);
        },
        writeWord(address, command, word, callback) {
            this.writeByteSync(address, command, word);
            callback(null);
        },
        writeQuickSync() {
            return null;
        },
        writeQuick(__, ___, ____, callback) {
            callback(null);
        },
        writeI2cBlockSync(address, command, length, buffer) {
            return buffer.copy(devices[address], command, 0, length);
        },
        writeI2cBlock(address, command, length, buffer, callback) {
            callback(null, this.writeI2cBlockSync(address, command, length, buffer), buffer);
        },
    };
};
export default createI2cBusMock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlSTJjQnVzTW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY3JlYXRlSTJjQnVzTW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLGtCQUFrQixHQUFHO0lBQ3pCLEdBQUcsRUFBRSxLQUFLO0lBQ1YsVUFBVSxFQUFFLEtBQUs7SUFDakIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixRQUFRLEVBQUUsS0FBSztJQUNmLGtCQUFrQixFQUFFLEtBQUs7SUFDekIsVUFBVSxFQUFFLEtBQUs7SUFDakIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixhQUFhLEVBQUUsS0FBSztJQUNwQixhQUFhLEVBQUUsS0FBSztJQUNwQixjQUFjLEVBQUUsS0FBSztJQUNyQixhQUFhLEVBQUUsS0FBSztJQUNwQixjQUFjLEVBQUUsS0FBSztJQUNyQixhQUFhLEVBQUUsS0FBSztJQUNwQixjQUFjLEVBQUUsS0FBSztJQUNyQixlQUFlLEVBQUUsS0FBSztJQUN0QixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLGtCQUFrQixFQUFFLEtBQUs7Q0FDMUIsQ0FBQztBQUVGLDBCQUEwQjtBQUMxQixNQUFNLGdCQUFnQixHQUFHLENBQUMsRUFDeEIsT0FBTyxHQUFHLEVBQUUsRUFDWixXQUFXLEdBQUcsa0JBQWtCLE1BSTlCLEVBQUUsRUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFTLEVBQUUsWUFBZ0MsRUFBVSxFQUFFO0lBQzlFLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQixPQUFPO1FBQ0wsS0FBSyxDQUFDLFFBQTRCO1lBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDO1FBQ0QsU0FBUztZQUNQLE9BQU87UUFDVCxDQUFDO1FBQ0QsWUFBWTtZQUNWLE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUM7UUFDRCxRQUFRLENBQUMsUUFBcUM7WUFDNUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENB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