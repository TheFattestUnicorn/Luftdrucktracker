import { promisifyAll } from 'bluebird';
import { open as openI2cBus } from 'i2c-bus';
import BusError from './BusError';
const Bus = ({ busNumber = 1, openBus = openI2cBus } = {}) => {
    let i2cBus = null;
    let isOpen = false;
    return {
        get busNumber() {
            return busNumber;
        },
        get i2cBus() {
            return i2cBus;
        },
        get isOpen() {
            return isOpen;
        },
        open() {
            return new Promise((resolve, reject) => {
                i2cBus = promisifyAll(openBus(this.busNumber, (error) => {
                    if (error) {
                        reject(`Error opening i2c bus: ${error.message}`);
                    }
                    isOpen = true;
                    resolve(this);
                }));
            });
        },
        async close() {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            await i2cBus.closeAsync();
            isOpen = false;
            i2cBus = null;
            return this;
        },
        async i2cFuncs() {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.i2cFuncsAsync();
        },
        async scan() {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.scanAsync();
        },
        async i2cRead(address, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.i2cReadAsync(address, length, buffer);
        },
        async i2cWrite(address, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.i2cWriteAsync(address, length, buffer);
        },
        async receiveByte(address) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.receiveByteAsync(address);
        },
        async sendByte(address, byte) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.sendByteAsync(address, byte);
        },
        async readByte(address, command) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.readByteAsync(address, command);
        },
        async readWord(address, command) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.readWordAsync(address, command);
        },
        async readI2cBlock(address, command, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.readI2cBlockAsync(address, command, length, buffer);
        },
        async writeByte(address, command, byte) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.writeByteAsync(address, command, byte);
        },
        async writeWord(address, command, word) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.writeWordAsync(address, command, word);
        },
        async writeI2cBlock(address, command, length, buffer) {
            if (!i2cBus || !isOpen) {
                throw new BusError('Bus is not open', busNumber);
            }
            return i2cBus.writeI2cBlockAsync(address, command, length, buffer);
        },
    };
};
export default Bus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9CdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsSUFBSSxJQUFJLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUU3QyxPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7QUFJbEMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBZ0IsRUFBRTtJQUN6RSxJQUFJLE1BQU0sR0FBMEIsSUFBSSxDQUFDO0lBQ3pDLElBQUksTUFBTSxHQUFZLEtBQUssQ0FBQztJQUU1QixPQUFPO1FBQ0wsSUFBSSxTQUFTO1lBQ1gsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUksTUFBTTtZQUNSLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxJQUFJLE1BQU07WUFDUixPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO1FBRUQsSUFBSTtZQUNGLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ3JDLE1BQU0sR0FBRyxZQUFZLENBQWlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7b0JBQzdFLElBQUksS0FBSyxFQUFFO3dCQUNULE1BQU0sQ0FBQywwQkFBMEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7cUJBQ25EO29CQUVELE1BQU0sR0FBRyxJQUFJLENBQUM7b0JBRWQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQW1CLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxLQUFLLENBQUMsS0FBSztZQUNULElB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