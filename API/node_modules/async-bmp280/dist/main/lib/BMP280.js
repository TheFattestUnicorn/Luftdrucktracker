"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_i2c_bus_1 = require("async-i2c-bus");
const constants_1 = require("./constants");
const helpers_1 = require("./helpers");
const utils_1 = require("./utils");
function BMP280({ address = constants_1.ADDRESS, bus }) {
    const temperatureCorrection = [0, 0, 0];
    const pressureCorrection = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    return Object.assign({}, async_i2c_bus_1.Device({ address, bus }), { async init({ temperatureOversampling = 'x1', pressureOversampling = 'x4', mode = 'NORMAL', standbyTime = '500us', iirFilter = 'x16', } = {}) {
            const id = await this.getId();
            if (id !== constants_1.ID) {
                throw new async_i2c_bus_1.DeviceError('Id does not correspond with a BMP280', this.bus.busNumber, constants_1.ADDRESS);
            }
            await this.reset();
            await Promise.all([this.readTemperatureCorrection(), this.readPressureCorrection()]);
            await this.writeControlMeasurement({
                temperatureOversampling,
                pressureOversampling,
                mode,
            });
            await this.writeConfig({
                standbyTime,
                iirFilter,
            });
            return this;
        },
        async getId() {
            return this.readByte(constants_1.REGISTERS.ID);
        },
        async reset() {
            await this.writeByte(constants_1.REGISTERS.RESET, 0xb6);
            return this;
        },
        async readStatus() {
            const status = await this.readByte(constants_1.REGISTERS.STATUS);
            return {
                measuring: !!utils_1.extractValue(status, constants_1.MASKS.MEASURING, constants_1.OFFSETS.MEASURING),
                imUpdate: !!utils_1.extractValue(status, constants_1.MASKS.IM_UPDATE, constants_1.OFFSETS.IM_UPDATE),
            };
        },
        async readControlMeasurement() {
            const ctrlMeas = await this.readByte(constants_1.REGISTERS.CTRL_MEAS);
            const { osrsT, osrsP, mode } = helpers_1.extractCtrlMeas(ctrlMeas);
            return {
                temperatureOversampling: helpers_1.readOversampling(osrsT),
                pressureOversampling: helpers_1.readOversampling(osrsP),
                mode: helpers_1.readMode(mode),
            };
        },
        async writeControlMeasurement(controlMeasurement) {
            const currentValue = await this.readByte(constants_1.REGISTERS.CTRL_MEAS);
            const { osrsT: currentOsrsT, osrsP: currentOsrsP, mode: currentMode } = helpers_1.extractCtrlMeas(currentValue);
            const osrsT = helpers_1.parseOversampling(controlMeasurement.temperatureOversampling, currentOsrsT);
            const osrsP = helpers_1.parseOversampling(controlMeasurement.pressureOversampling, currentOsrsP);
            const mode = helpers_1.parseMode(controlMeasurement.mode, currentMode);
            await this.writeByte(constants_1.REGISTERS.CTRL_MEAS, (osrsT << constants_1.OFFSETS.OSRS_T) | (osrsP << constants_1.OFFSETS.OSRS_P) | (mode << constants_1.OFFSETS.MODE));
            return this;
        },
        async readConfig() {
            const config = await this.readByte(constants_1.REGISTERS.CONFIG);
            const { tSb, filter } = helpers_1.extractConfig(config);
            return {
                standbyTime: helpers_1.readStandbyTime(tSb),
                iirFilter: helpers_1.readIirFilter(filter),
            };
        },
        async writeConfig(config) {
            const currentValue = await this.readByte(constants_1.REGISTERS.CONFIG);
            const { tSb: currentTsB, filter: currentFilter } = helpers_1.extractConfig(currentValue);
            const tSb = helpers_1.parseStandbyTime(config.standbyTime, currentTsB);
            const filter = helpers_1.parseIirFilter(config.iirFilter, currentFilter);
            await this.writeByte(constants_1.REGISTERS.CONFIG, (tSb << constants_1.OFFSETS.T_SB) | (filter << constants_1.OFFSETS.FILTER));
            return this;
        },
        async readTemperatureCorrection() {
            const buffer = Buffer.alloc(6);
            await this.readI2cBlock(constants_1.REGISTERS.TEMP_CORRECTION, 6, buffer);
            temperatureCorrection[0] = buffer.readUInt16LE(0);
            temperatureCorrection[1] = buffer.readInt16LE(2);
            temperatureCorrection[2] = buffer.readInt16LE(4);
            return this;
        },
        async readPressureCorrection() {
            const buffer = Buffer.alloc(18);
            await this.readI2cBlock(constants_1.REGISTERS.PRESS_CORRECTION, 18, buffer);
            pressureCorrection[0] = buffer.readUInt16LE(0);
            pressureCorrection[1] = buffer.readInt16LE(2);
            pressureCorrection[2] = buffer.readInt16LE(4);
            pressureCorrection[3] = buffer.readInt16LE(6);
            pressureCorrection[4] = buffer.readInt16LE(8);
            pressureCorrection[5] = buffer.readInt16LE(10);
            pressureCorrection[6] = buffer.readInt16LE(12);
            pressureCorrection[7] = buffer.readInt16LE(14);
            pressureCorrection[8] = buffer.readInt16LE(16);
            return this;
        },
        async readTemperature() {
            const buffer = Buffer.alloc(3);
            await this.readI2cBlock(constants_1.REGISTERS.TEMP, 3, buffer);
            const temperature = helpers_1.calculateTemperature(buffer.readUIntBE(0, 3) >>> 4, temperatureCorrection);
            return temperature / 5120;
        },
        async readPressure() {
            const tempBuffer = Buffer.alloc(3);
            const pressBuffer = Buffer.alloc(3);
            await Promise.all([
                this.readI2cBlock(constants_1.REGISTERS.TEMP, 3, tempBuffer),
                this.readI2cBlock(constants_1.REGISTERS.PRESS, 3, pressBuffer),
            ]);
            const temperature = helpers_1.calculateTemperature(tempBuffer.readUIntBE(0, 3) >>> 4, temperatureCorrection);
            return helpers_1.calculatePressure(pressBuffer.readUIntBE(0, 3) >>> 4, temperature, pressureCorrection);
        } });
}
exports.default = BMP280;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQk1QMjgwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9CTVAyODAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBa0U7QUFHbEUsMkNBQXFFO0FBQ3JFLHVDQWFtQjtBQUNuQixtQ0FBdUM7QUFFdkMsU0FBd0IsTUFBTSxDQUFDLEVBQUUsT0FBTyxHQUFHLG1CQUFPLEVBQUUsR0FBRyxFQUEyQztJQUNoRyxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV2RCx5QkFDSyxzQkFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBRTNCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDVCx1QkFBdUIsR0FBRyxJQUFJLEVBQzlCLG9CQUFvQixHQUFHLElBQUksRUFDM0IsSUFBSSxHQUFHLFFBQVEsRUFDZixXQUFXLEdBQUcsT0FBTyxFQUNyQixTQUFTLEdBQUcsS0FBSyxNQUNtQyxFQUFFO1lBQ3RELE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRTlCLElBQUksRUFBRSxLQUFLLGNBQUUsRUFBRTtnQkFDYixNQUFNLElBQUksMkJBQVcsQ0FBQyxzQ0FBc0MsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxtQkFBTyxDQUFDLENBQUM7YUFDNUY7WUFFRCxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUVuQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUs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