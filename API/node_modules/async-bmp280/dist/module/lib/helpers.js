import { IIR_FILTER, MASKS, MODE, OFFSETS, OVERSAMPLING, STANDBY_TIME } from './constants';
import { extractValue, lookUp, reverseLookUp } from './utils';
/**
 * @hidden
 */
export const extractCtrlMeas = (value) => ({
    osrsT: extractValue(value, MASKS.OSRS_T, OFFSETS.OSRS_T),
    osrsP: extractValue(value, MASKS.OSRS_P, OFFSETS.OSRS_P),
    mode: extractValue(value, MASKS.MODE, OFFSETS.MODE),
});
/**
 * @hidden
 */
export const extractConfig = (value) => ({
    tSb: extractValue(value, MASKS.T_SB, OFFSETS.T_SB),
    filter: extractValue(value, MASKS.FILTER, OFFSETS.FILTER),
});
/**
 * @hidden
 */
export const parseOversampling = lookUp(OVERSAMPLING);
/**
 * @hidden
 */
export const readOversampling = reverseLookUp(OVERSAMPLING);
/**
 * @hidden
 */
export const parseMode = lookUp(MODE);
/**
 * @hidden
 */
export const readMode = reverseLookUp(MODE);
/**
 * @hidden
 */
export const parseStandbyTime = lookUp(STANDBY_TIME);
/**
 * @hidden
 */
export const readStandbyTime = reverseLookUp(STANDBY_TIME);
/**
 * @hidden
 */
export const parseIirFilter = lookUp(IIR_FILTER);
/**
 * @hidden
 */
export const readIirFilter = reverseLookUp(IIR_FILTER);
/**
 * @hidden
 */
export const calculateTemperature = (rawTemperature, correction) => {
    const var1 = (rawTemperature / 16384 - correction[0] / 1024) * correction[1];
    const var2 = Math.pow(rawTemperature / 131072 - correction[0] / 8192, 2) * correction[2];
    return var1 + var2;
};
/**
 * @hidden
 */
export const calculatePressure = (rawPressure, temperatureFine, correction) => {
    let var1 = temperatureFine / 2 - 64000;
    let var2 = var1 * (var1 * (correction[5] / 32768) + correction[4] * 2);
    var2 = var2 / 4 + correction[3] * 65536;
    var1 = ((correction[2] * var1 * var1) / 524288 + correction[1] * var1) / 524288;
    var1 = (1 + var1 / 32768) * correction[0];
    if (var1 === 0) {
        return 0;
    }
    let var3 = 1048576 - rawPressure;
    var3 = (var3 - var2 / 4096) * (6250 / var1);
    var1 = correction[8] * ((var3 * var3) / 2147483648);
    var2 = (var3 * correction[7]) / 32768;
    return var3 + (var1 + var2 + correction[6]) / 16;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0YsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTlEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN4RCxLQUFLLEVBQUUsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDeEQsSUFBSSxFQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDO0NBQ3BELENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsRUFBRSxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNsRCxNQUFNLEVBQUUsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7Q0FDMUQsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQXFCLFlBQVksQ0FBQyxDQUFDO0FBQzFFOztHQUVH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