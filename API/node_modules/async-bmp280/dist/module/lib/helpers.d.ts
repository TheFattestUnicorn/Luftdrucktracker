import { BMP280Mode, BMP280Oversampling, BMP280StandbyTime } from './BMP280Interface';
/**
 * @hidden
 */
export declare const extractCtrlMeas: (value: number) => {
    osrsT: number;
    osrsP: number;
    mode: number;
};
/**
 * @hidden
 */
export declare const extractConfig: (value: number) => {
    tSb: number;
    filter: number;
};
/**
 * @hidden
 */
export declare const parseOversampling: (key?: "x0" | "x1" | "x2" | "x4" | "x8" | "x16" | undefined, defaultValue?: number) => number;
/**
 * @hidden
 */
export declare const readOversampling: (registerValue: number) => BMP280Oversampling;
/**
 * @hidden
 */
export declare const parseMode: (key?: "SLEEP" | "FORCED" | "NORMAL" | undefined, defaultValue?: number) => number;
/**
 * @hidden
 */
export declare const readMode: (registerValue: number) => BMP280Mode;
/**
 * @hidden
 */
export declare const parseStandbyTime: (key?: "500us" | "62ms" | "125ms" | "250ms" | "500ms" | "1s" | "2s" | "4s" | undefined, defaultValue?: number) => number;
/**
 * @hidden
 */
export declare const readStandbyTime: (registerValue: number) => BMP280StandbyTime;
/**
 * @hidden
 */
export declare const parseIirFilter: (key?: "x0" | "x1" | "x2" | "x4" | "x8" | "x16" | undefined, defaultValue?: number) => number;
/**
 * @hidden
 */
export declare const readIirFilter: (registerValue: number) => BMP280Oversampling;
/**
 * @hidden
 */
export declare const calculateTemperature: (rawTemperature: number, correction: number[]) => number;
/**
 * @hidden
 */
export declare const calculatePressure: (rawPressure: number, temperatureFine: number, correction: number[]) => number;
