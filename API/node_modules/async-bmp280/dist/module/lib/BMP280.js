import { Device, DeviceError } from 'async-i2c-bus';
import { ADDRESS, ID, MASKS, OFFSETS, REGISTERS } from './constants';
import { calculatePressure, calculateTemperature, extractConfig, extractCtrlMeas, parseIirFilter, parseMode, parseOversampling, parseStandbyTime, readIirFilter, readMode, readOversampling, readStandbyTime, } from './helpers';
import { extractValue } from './utils';
export default function BMP280({ address = ADDRESS, bus }) {
    const temperatureCorrection = [0, 0, 0];
    const pressureCorrection = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    return {
        ...Device({ address, bus }),
        async init({ temperatureOversampling = 'x1', pressureOversampling = 'x4', mode = 'NORMAL', standbyTime = '500us', iirFilter = 'x16', } = {}) {
            const id = await this.getId();
            if (id !== ID) {
                throw new DeviceError('Id does not correspond with a BMP280', this.bus.busNumber, ADDRESS);
            }
            await this.reset();
            await Promise.all([this.readTemperatureCorrection(), this.readPressureCorrection()]);
            await this.writeControlMeasurement({
                temperatureOversampling,
                pressureOversampling,
                mode,
            });
            await this.writeConfig({
                standbyTime,
                iirFilter,
            });
            return this;
        },
        async getId() {
            return this.readByte(REGISTERS.ID);
        },
        async reset() {
            await this.writeByte(REGISTERS.RESET, 0xb6);
            return this;
        },
        async readStatus() {
            const status = await this.readByte(REGISTERS.STATUS);
            return {
                measuring: !!extractValue(status, MASKS.MEASURING, OFFSETS.MEASURING),
                imUpdate: !!extractValue(status, MASKS.IM_UPDATE, OFFSETS.IM_UPDATE),
            };
        },
        async readControlMeasurement() {
            const ctrlMeas = await this.readByte(REGISTERS.CTRL_MEAS);
            const { osrsT, osrsP, mode } = extractCtrlMeas(ctrlMeas);
            return {
                temperatureOversampling: readOversampling(osrsT),
                pressureOversampling: readOversampling(osrsP),
                mode: readMode(mode),
            };
        },
        async writeControlMeasurement(controlMeasurement) {
            const currentValue = await this.readByte(REGISTERS.CTRL_MEAS);
            const { osrsT: currentOsrsT, osrsP: currentOsrsP, mode: currentMode } = extractCtrlMeas(currentValue);
            const osrsT = parseOversampling(controlMeasurement.temperatureOversampling, currentOsrsT);
            const osrsP = parseOversampling(controlMeasurement.pressureOversampling, currentOsrsP);
            const mode = parseMode(controlMeasurement.mode, currentMode);
            await this.writeByte(REGISTERS.CTRL_MEAS, (osrsT << OFFSETS.OSRS_T) | (osrsP << OFFSETS.OSRS_P) | (mode << OFFSETS.MODE));
            return this;
        },
        async readConfig() {
            const config = await this.readByte(REGISTERS.CONFIG);
            const { tSb, filter } = extractConfig(config);
            return {
                standbyTime: readStandbyTime(tSb),
                iirFilter: readIirFilter(filter),
            };
        },
        async writeConfig(config) {
            const currentValue = await this.readByte(REGISTERS.CONFIG);
            const { tSb: currentTsB, filter: currentFilter } = extractConfig(currentValue);
            const tSb = parseStandbyTime(config.standbyTime, currentTsB);
            const filter = parseIirFilter(config.iirFilter, currentFilter);
            await this.writeByte(REGISTERS.CONFIG, (tSb << OFFSETS.T_SB) | (filter << OFFSETS.FILTER));
            return this;
        },
        async readTemperatureCorrection() {
            const buffer = Buffer.alloc(6);
            await this.readI2cBlock(REGISTERS.TEMP_CORRECTION, 6, buffer);
            temperatureCorrection[0] = buffer.readUInt16LE(0);
            temperatureCorrection[1] = buffer.readInt16LE(2);
            temperatureCorrection[2] = buffer.readInt16LE(4);
            return this;
        },
        async readPressureCorrection() {
            const buffer = Buffer.alloc(18);
            await this.readI2cBlock(REGISTERS.PRESS_CORRECTION, 18, buffer);
            pressureCorrection[0] = buffer.readUInt16LE(0);
            pressureCorrection[1] = buffer.readInt16LE(2);
            pressureCorrection[2] = buffer.readInt16LE(4);
            pressureCorrection[3] = buffer.readInt16LE(6);
            pressureCorrection[4] = buffer.readInt16LE(8);
            pressureCorrection[5] = buffer.readInt16LE(10);
            pressureCorrection[6] = buffer.readInt16LE(12);
            pressureCorrection[7] = buffer.readInt16LE(14);
            pressureCorrection[8] = buffer.readInt16LE(16);
            return this;
        },
        async readTemperature() {
            const buffer = Buffer.alloc(3);
            await this.readI2cBlock(REGISTERS.TEMP, 3, buffer);
            const temperature = calculateTemperature(buffer.readUIntBE(0, 3) >>> 4, temperatureCorrection);
            return temperature / 5120;
        },
        async readPressure() {
            const tempBuffer = Buffer.alloc(3);
            const pressBuffer = Buffer.alloc(3);
            await Promise.all([
                this.readI2cBlock(REGISTERS.TEMP, 3, tempBuffer),
                this.readI2cBlock(REGISTERS.PRESS, 3, pressBuffer),
            ]);
            const temperature = calculateTemperature(tempBuffer.readUIntBE(0, 3) >>> 4, temperatureCorrection);
            return calculatePressure(pressBuffer.readUIntBE(0, 3) >>> 4, temperature, pressureCorrection);
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQk1QMjgwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9CTVAyODAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2xFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JFLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsb0JBQW9CLEVBQ3BCLGFBQWEsRUFDYixlQUFlLEVBQ2YsY0FBYyxFQUNkLFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixRQUFRLEVBQ1IsZ0JBQWdCLEVBQ2hCLGVBQWUsR0FDaEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV2QyxNQUFNLENBQUMsT0FBTyxVQUFVLE1BQU0sQ0FBQyxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxFQUEyQztJQUNoRyxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV2RCxPQUFPO1FBQ0wsR0FBRyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFFM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUNULHVCQUF1QixHQUFHLElBQUksRUFDOUIsb0JBQW9CLEdBQUcsSUFBSSxFQUMzQixJQUFJLEdBQUcsUUFBUSxFQUNmLFdBQVcsR0FBRyxPQUFPLEVBQ3JCLFNBQVMsR0FBRyxL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