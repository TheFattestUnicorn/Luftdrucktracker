/// <reference types="node" />
import { I2cReadResponse, I2cWriteResponse } from 'i2c-bus';
import Bus from './Bus';
export default class Device {
    private bus;
    readonly address: number;
    constructor({ bus, address }: {
        bus: Bus;
        address: number;
    });
    readByte(command: number): Promise<number>;
    readWord(command: number): Promise<number>;
    readI2cBlock(command: number, length: number, buffer: Buffer): Promise<I2cReadResponse>;
    receiveByte(): Promise<number>;
    sendByte(byte: number): Promise<this>;
    writeByte(command: number, byte: number): Promise<this>;
    writeWord(command: number, word: number): Promise<this>;
    writeQuick(bit: 0 | 1): Promise<this>;
    writeI2cBlock(command: number, length: number, buffer: Buffer): Promise<I2cWriteResponse>;
    i2cRead(length: number, buffer: Buffer): Promise<I2cReadResponse>;
    i2cWrite(length: number, buffer: Buffer): Promise<I2cWriteResponse>;
    deviceId(): Promise<number>;
    static create({ bus, address }: {
        bus: Bus;
        address: number;
    }): Device;
}
