/// <reference types="node" />
import { I2cFuncs, I2cReadResponse, I2cWriteResponse } from 'i2c-bus';
export default class Bus {
    private i2cBus;
    readonly busNumber: number;
    isOpen: boolean;
    constructor({ busNumber }: {
        busNumber: number;
    });
    private guardAgainstClosedBus;
    open(): Promise<this>;
    close(): Promise<this>;
    i2cFuncs(): Promise<I2cFuncs>;
    readByte(address: number, command: number): Promise<number>;
    readWord(address: number, command: number): Promise<number>;
    readI2cBlock(address: number, command: number, length: number, buffer: Buffer): Promise<I2cReadResponse>;
    receiveByte(address: number): Promise<number>;
    sendByte(address: number, byte: number): Promise<this>;
    writeByte(address: number, command: number, byte: number): Promise<this>;
    writeWord(address: number, command: number, word: number): Promise<this>;
    writeQuick(address: number, bit: 0 | 1): Promise<this>;
    writeI2cBlock(address: number, command: number, length: number, buffer: Buffer): Promise<I2cWriteResponse>;
    i2cRead(address: number, length: number, buffer: Buffer): Promise<I2cReadResponse>;
    i2cWrite(address: number, length: number, buffer: Buffer): Promise<I2cWriteResponse>;
    scan(startAddress?: number, endAddress?: number): Promise<number[]>;
    deviceId(address: number): Promise<number>;
    static create({ busNumber }: {
        busNumber: number;
    }): Bus;
    static createAndOpen({ busNumber }: {
        busNumber: number;
    }): Promise<Bus>;
}
